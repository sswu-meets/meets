# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_NAME: meets-spring-boot-project
  BUCKET_NAME: meets-spring-boot-project-bucket
  CODE_DEPLOY_APP_NAME: meets-spring-boot-project
  DEPLOYMENT_GROUP_NAME: meets-spring-boot-project-deploy

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v2

      - name: Setup Java JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      # application-prod.properties 파일 만들기
      - name: make application-prod.properties
        run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          # GitHub-Actions에서 설정한 값을 application-dev.properties 파일에 쓰기
          echo "${{ secrets.PROPERTIES }}" > ./application-prod.properties
        shell: bash

      # gradlew 파일 실행권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # 스크립트 파일 복사
      - name: Copy shell
        run: cp ./scripts/* ./deploy/

      # Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml 복사
      - name: Copy appspec
        run: cp appspec.yml ./deploy/

      # deploy 폴더 내의 모든 파일을 압축하여 zip 파일 만들기
      - name: Make zip file
        run: zip -r -qq -j ./$PROJECT_NAME.zip ./deploy/

      # S3 Bucket으로 복사
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./$PROJECT_NAME.zip s3://$BUCKET_NAME/$PROJECT_NAME.zip

      # 배포
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name $CODE_DEPLOY_APP_NAME \
          --deployment-group-name $DEPLOYMENT_GROUP_NAME \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME.zip \
          --region ap-northeast-2
